// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-tvos13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EaseLiveSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import CryptoKit
import Foundation
import MediaPlayer
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @objcMembers open class PlayerPluginBase : ObjectiveC.NSObject, EaseLiveSDK.PlayerPluginInterface {
  @objc public var TAG: Swift.String
  public var currentTimecode: Swift.Int64?
  public var initialTimecode: Swift.Int64?
  public var maxTimecode: Swift.Int64?
  @objc public var url: Swift.String?
  @objc open func createPlayer()
  @objc open func destroyPlayer()
  @objc open func playVideoUrl(url: Swift.String)
  @objc open func setTime(time: Swift.Int64)
  @objc open func setState(state: EaseLiveSDK.PlayerState)
  @objc open func setControllerVisible(visible: Swift.Bool)
  @objc override dynamic public init()
  @objc public init(url: Swift.String)
  @objc deinit
  @objc @available(*, unavailable, message: "migrate to create()")
  public func create(params: Any?)
  @objc open func create()
  @objc open func load()
  @objc open func destroy()
  @objc open func pause()
  @objc open func setUrl(videoUrl: Swift.String)
  @objc open func onTime(time: Swift.Int64)
  @objc open func onTime(time: Swift.Int64, position: Swift.Int64, duration: Swift.Int64)
  @objc open func onControllerVisibilityChanged(visible: Swift.Bool)
  @objc open func onStage(controls: Swift.String)
  @objc open func onState(state: EaseLiveSDK.PlayerState)
  @objc open func onMetadata(metadata: Swift.String)
  @objc open func onCreate()
  @objc open func onLoad()
  @objc open func onReady()
  @objc open func onError(error: EaseLiveSDK.EaseLiveError?)
  @objc open func onBridgeReady()
  @objc open func onViewReady()
  @objc open func setSelectedTracks(tracks: EaseLiveSDK.PlayerTracks)
  @objc open func onTracksChanged(tracks: EaseLiveSDK.PlayerTracks)
  @objc open func onSpeedChanged(speed: Swift.Float)
  @objc open func setSpeed(speed: Swift.Float)
  @objc open func onVolumeChanged(volume: Swift.Int)
  @objc open func setVolume(volume: Swift.Int)
  @objc open func onMuteChanged(mute: Swift.Bool)
  @objc open func setMute(mute: Swift.Bool)
  @objc open func setVideoScale(scaleX: Swift.Float, scaleY: Swift.Float, pivotX: Swift.Float, pivotY: Swift.Float, duration: Swift.Int)
  @objc open func didSwipeStage(direction: UIKit.UISwipeGestureRecognizer.Direction)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PlayerTrack : ObjectiveC.NSObject {
  @objc public var id: Swift.String? {
    get
  }
  @objc public var name: Swift.String? {
    get
  }
  @objc public var language: Swift.String? {
    get
  }
  @objc public func toJsonObject() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PlayerTrackConfig : ObjectiveC.NSObject {
  @objc public var selectedId: Swift.String?
  @objc public var available: [EaseLiveSDK.PlayerTrack] {
    get
  }
  @objc public func addTrack(id: Swift.String, name: Swift.String, language: Swift.String?)
  @objc public func toJsonObject() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PlayerTracks : ObjectiveC.NSObject {
  @objc public var video: EaseLiveSDK.PlayerTrackConfig {
    get
  }
  @objc public var audio: EaseLiveSDK.PlayerTrackConfig {
    get
  }
  @objc public var text: EaseLiveSDK.PlayerTrackConfig {
    get
  }
  @objc public func toJsonObject() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PlayerState : Swift.Int {
  case playing, paused, seeking, stopped, buffering
  public func description() -> Swift.String
  public static func forStateName(_ playerState: Swift.String) -> EaseLiveSDK.PlayerState?
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PlayerStateUtils : ObjectiveC.NSObject {
  @objc @available(*, deprecated, message: "use PlayerState#description")
  public static func getPlayerStateString(playerState: EaseLiveSDK.PlayerState) -> Swift.String
  @objc @available(*, deprecated, message: "use PlayerState#forStateName")
  public static func getPlayerStateObject(playerState: Swift.String) -> EaseLiveSDK.PlayerState
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ComponentInterface : ObjectiveC.NSObjectProtocol {
  @objc func create()
  @objc func load()
  @objc func destroy()
  @objc func pause()
}
@available(*, unavailable, message: "migrate to ComponentInterface")
public typealias ComponentProtocol = EaseLiveSDK.ComponentInterface
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class EaseLive : ObjectiveC.NSObject, EaseLiveSDK.ComponentInterface {
  @objc public var viewPlugin: EaseLiveSDK.ViewPluginInterface? {
    get
  }
  @objc public var bridgePlugin: EaseLiveSDK.BridgePluginInterface? {
    get
  }
  @objc public var playerPlugin: EaseLiveSDK.PlayerPluginInterface? {
    get
  }
  @objc public var additionalPlugins: [EaseLiveSDK.ComponentInterface] {
    get
  }
  @objc public static func setDebugging(debug: Swift.Bool)
  @objc public static func isDebugging() -> Swift.Bool
  @objc deinit
  @objc convenience public init(parentView: UIKit.UIView, webUrl: Swift.String, playerPlugin: EaseLiveSDK.PlayerPluginInterface?)
  @objc @available(*, deprecated, message: "please migrate to init(parentView: UIView, webUrl: String, playerPlugin: PlayerPluginInterface)")
  convenience public init(url: Swift.String, playerPlugin: EaseLiveSDK.PlayerPluginInterface)
  @objc convenience public init(viewPlugin: EaseLiveSDK.ViewPluginInterface, playerPlugin: EaseLiveSDK.PlayerPluginInterface)
  @objc @available(*, unavailable, message: "migrate to init(parentView: UIView, webUrl: String, playerPlugin: PlayerPluginInterface)")
  convenience public init(url: Swift.String, videoUrl: Swift.String)
  @objc convenience public init(parentView: UIKit.UIView, accountId: Swift.String, projectId: Swift.String?, programId: Swift.String, env: Swift.String?, params: [Swift.String : Any]?, playerPlugin: EaseLiveSDK.PlayerPluginInterface?)
  @objc public func setProgram(projectId: Swift.String?, programId: Swift.String, env: Swift.String?, params: [Swift.String : Any]?)
  @objc public func use(plugin: EaseLiveSDK.ComponentInterface)
  @objc public func removeAllAdditionalPlugins()
  @objc @available(*, unavailable, renamed: "setUrl(webUrl:)")
  public func setUrl(url: Swift.String)
  @objc public func setUrl(webUrl: Swift.String)
  @objc public func setUrl(videoUrl: Swift.String)
  @objc @available(*, deprecated, message: "migrate to create() and pass the parent view to the constructor")
  public func create(params: Any?)
  @objc public func create()
  @objc public func load()
  @objc public func destroy()
  @objc public func pause()
  @objc public func onCreate()
  @objc public func onLoad()
  @objc public func onReady()
  @objc public func onError(error: EaseLiveSDK.EaseLiveError?)
  @objc public func onError(notification: Foundation.Notification?)
  @objc public func hasFocus() -> Swift.Bool
  @objc public var preferredFocusEnvironments: [UIKit.UIFocusEnvironment] {
    @objc get
  }
  @objc public func testIntegration()
}
@objc public protocol BridgePluginInterface : EaseLiveSDK.ComponentInterface {
  @objc func send(event: Swift.String, payload: Swift.String?)
  @objc func onMessage(message: Swift.String)
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "renamed EaseLiveAvPlayer")
@objcMembers public class ExtendedVideoPlayer : EaseLiveSDK.EaseLiveAvPlayer {
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers open class EaseLiveAvPlayer : AVFoundation.AVPlayer, AVFoundation.AVPlayerItemMetadataOutputPushDelegate {
  @objc weak public var playerPlugin: EaseLiveSDK.EaseLiveAvPlayerPlugin?
  @objc override dynamic public init()
  @objc override dynamic public func replaceCurrentItem(with item: AVFoundation.AVPlayerItem?)
  @objc public func currentItemDuration() -> Swift.Float64
  @objc public func currentItemPosition() -> Swift.Float64
  @objc open func onVolumeChanged(volume: Swift.Float)
  @objc open func onMuteChanged(mute: Swift.Bool)
  @objc open func onTimeControlStatusChanged(status: AVFoundation.AVPlayer.TimeControlStatus)
  @objc open func onRateChanged(rate: Swift.Float)
  @objc public func metadataOutput(_ output: AVFoundation.AVPlayerItemMetadataOutput, didOutputTimedMetadataGroups groups: [AVFoundation.AVTimedMetadataGroup], from track: AVFoundation.AVPlayerItemTrack?)
  @objc public func removePlayerItemObservers()
  @objc public func removeTimers()
  @objc deinit
  @objc public func selectVideoTrackIndex(index: Swift.Int, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func selectAudioTrackIndex(index: Swift.Int, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func selectTextTrackIndex(index: Swift.Int, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class EaseLiveError : ObjectiveC.NSObject {
  @objc(EaseLiveErrorLevel) public enum Level : Swift.Int {
    case fatal
    case warning
    public func description() -> Swift.String
    public static func fromString(_ levelString: Swift.String) -> EaseLiveSDK.EaseLiveError.Level
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(EaseLiveErrorComponent) public enum Component : Swift.Int {
    case viewInit
    case viewConnectivity
    case bridgeInit
    case bridgeConnectivity
    case playerInit
    case playerConnectivity
    public func description() -> Swift.String
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class func bridgeInit(level: EaseLiveSDK.EaseLiveError.Level, reason: Swift.String) -> EaseLiveSDK.EaseLiveError
  @objc public class func bridgeConnectivity(level: EaseLiveSDK.EaseLiveError.Level, reason: Swift.String) -> EaseLiveSDK.EaseLiveError
  @objc public class func viewInit(level: EaseLiveSDK.EaseLiveError.Level, reason: Swift.String) -> EaseLiveSDK.EaseLiveError
  @objc public class func viewConnectivity(level: EaseLiveSDK.EaseLiveError.Level, reason: Swift.String) -> EaseLiveSDK.EaseLiveError
  @objc public class func playerInit(level: EaseLiveSDK.EaseLiveError.Level, reason: Swift.String) -> EaseLiveSDK.EaseLiveError
  @objc public class func playerConnectivity(level: EaseLiveSDK.EaseLiveError.Level, reason: Swift.String) -> EaseLiveSDK.EaseLiveError
  public class func appError(level: EaseLiveSDK.EaseLiveError.Level, reason: Swift.String, code: Swift.Int?, programId: Swift.String?) -> EaseLiveSDK.EaseLiveError
  @objc final public let component: EaseLiveSDK.EaseLiveError.Component
  @objc final public let level: EaseLiveSDK.EaseLiveError.Level
  @objc final public let reason: Swift.String
  final public let code: Swift.Int?
  @objc final public let programId: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class EaseLiveNotificationKeys : ObjectiveC.NSObject {
  @objc public static let easeLiveReady: Foundation.Notification.Name
  @objc public static let easeLiveError: Foundation.Notification.Name
  @objc public static let viewCreated: Foundation.Notification.Name
  @objc public static let viewLoad: Foundation.Notification.Name
  @objc public static let viewReady: Foundation.Notification.Name
  @objc public static let viewError: Foundation.Notification.Name
  @objc public static let bridgeAppLoading: Foundation.Notification.Name
  @objc public static let bridgeAppReady: Foundation.Notification.Name
  @objc public static let bridgeAppStatus: Foundation.Notification.Name
  @objc public static let bridgeReady: Foundation.Notification.Name
  @objc public static let bridgeError: Foundation.Notification.Name
  @objc public static let bridgeSpeed: Foundation.Notification.Name
  @objc public static let bridgeStage: Foundation.Notification.Name
  @objc public static let bridgeStageSwipe: Foundation.Notification.Name
  @objc public static let bridgeStageTouchStart: Foundation.Notification.Name
  @objc public static let bridgeStageTouchMove: Foundation.Notification.Name
  @objc public static let bridgeStageTouchEnd: Foundation.Notification.Name
  @objc public static let bridgeStageTouchCancel: Foundation.Notification.Name
  @objc public static let bridgeState: Foundation.Notification.Name
  @objc public static let bridgeTime: Foundation.Notification.Name
  @objc public static let bridgeTracks: Foundation.Notification.Name
  @objc public static let bridgeVolume: Foundation.Notification.Name
  @objc public static let bridgeMute: Foundation.Notification.Name
  @objc public static let bridgeVideoScale: Foundation.Notification.Name
  @objc public static let bridgeConfig: Foundation.Notification.Name
  @objc public static let bridgeKeepAlive: Foundation.Notification.Name
  @objc public static let bridgeLanguage: Foundation.Notification.Name
  @objc public static let bridgeMessage: Foundation.Notification.Name
  @objc public static let playerReady: Foundation.Notification.Name
  @objc public static let playerError: Foundation.Notification.Name
  @objc public static let playerMetadata: Foundation.Notification.Name
  @objc public static let playerSpeed: Foundation.Notification.Name
  @objc public static let playerStage: Foundation.Notification.Name
  @objc public static let playerState: Foundation.Notification.Name
  @objc public static let playerTime: Foundation.Notification.Name
  @objc public static let playerTracks: Foundation.Notification.Name
  @objc public static let playerVolume: Foundation.Notification.Name
  @objc public static let playerMute: Foundation.Notification.Name
  @objc public static let appLanguage: Foundation.Notification.Name
  @objc public static let appMessage: Foundation.Notification.Name
  @objc public static let configUserInfoKey: Swift.String
  @objc public static let errorUserInfoKey: Swift.String
  @objc public static let controlsUserInfoKey: Swift.String
  @objc public static let timecodeUserInfoKey: Swift.String
  @objc public static let initialTimecodeUserInfoKey: Swift.String
  @objc public static let maxTimecodeUserInfoKey: Swift.String
  @objc public static let metadataUserInfoKey: Swift.String
  @objc public static let stateUserInfoKey: Swift.String
  @objc public static let languageUserInfoKey: Swift.String
  @objc public static let availableUserInfoKey: Swift.String
  @objc public static let jsonStringUserInfoKey: Swift.String
  @objc public static let tracksUserInfoKey: Swift.String
  @objc public static let speedUserInfoKey: Swift.String
  @objc public static let volumeUserInfoKey: Swift.String
  @objc public static let muteUserInfoKey: Swift.String
  @objc public static let directionUserInfoKey: Swift.String
  @objc public static let statusUserInfoKey: Swift.String
  @objc public static let videoScaleXUserInfoKey: Swift.String
  @objc public static let videoScaleYUserInfoKey: Swift.String
  @objc public static let videoPivotXUserInfoKey: Swift.String
  @objc public static let videoPivotYUserInfoKey: Swift.String
  @objc public static let videoScaleDurationUserInfoKey: Swift.String
  @objc public static let idUserInfoKey: Swift.String
  @objc public static let xUserInfoKey: Swift.String
  @objc public static let yUserInfoKey: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ViewPluginInterface : EaseLiveSDK.ComponentInterface {
  @objc func setUrl(url: Swift.String)
  @objc func url() -> Swift.String?
  @objc func view() -> UIKit.UIView?
  @objc func hasInjectedBridge() -> Swift.Bool
  @objc func injectJavascript(javaScriptString: Swift.String, completionHandler: ((Any?, Swift.Error?) -> Swift.Void)?)
}
@objc open class SecondScreenPlayerPlugin : EaseLiveSDK.PlayerPluginBase {
  @objc override dynamic public init()
  @objc override open func destroy()
  @objc override open func setState(state: EaseLiveSDK.PlayerState)
  @objc override open func setTime(time: Swift.Int64)
  @objc override open func setSpeed(speed: Swift.Float)
  @objc override open func create()
  @objc override open func pause()
  @objc override open func load()
  @objc override open func onBridgeReady()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BridgeConfigHelper : ObjectiveC.NSObject {
  @objc public static func createUrl(url: Swift.String?, params: [Swift.String : Any]?, replace: Swift.Bool = false) -> Swift.String?
  @objc public static func readQueryParameters(_ url: Foundation.URL) -> [Swift.String : Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
public struct LogUtils {
  public static let VERBOSE: Swift.Int
  public static let DEBUG: Swift.Int
  public static let INFO: Swift.Int
  public static let WARN: Swift.Int
  public static let ERROR: Swift.Int
  public static var logLevel: Swift.Int
  public static func dev(_ tag: Swift.String, message: Swift.String)
  public static func debug(_ tag: Swift.String, message: Swift.String)
  public static func verbose(_ tag: Swift.String, message: Swift.String)
  public static func info(_ tag: Swift.String, message: Swift.String)
  public static func warn(_ tag: Swift.String, message: Swift.String)
  public static func error(_ tag: Swift.String, message: Swift.String, error: EaseLiveSDK.EaseLiveError?)
}
@objc @available(iOS 13.0, tvOS 13.0, *)
open class CloudRenderViewPlugin : ObjectiveC.NSObject, EaseLiveSDK.ViewPluginInterface {
  public var shouldShowIntegrationTest: Swift.Bool {
    get
    set
  }
  public var shouldHandleBackButton: Swift.Bool {
    get
    set
  }
  public var playerControlsFocusHeading: UIKit.UIFocusHeading? {
    get
    set
  }
  public init(easeLive: EaseLiveSDK.EaseLive, parentView: UIKit.UIView, url: Swift.String?)
  @objc public func setUrl(url: Swift.String)
  @objc public func url() -> Swift.String?
  @objc deinit
  @objc public func create()
  @objc public func load()
  @objc public func view() -> UIKit.UIView?
  @objc public func hasInjectedBridge() -> Swift.Bool
  @objc public func injectJavascript(javaScriptString: Swift.String, completionHandler: ((Any?, Swift.Error?) -> Swift.Void)?)
  @objc public func destroy()
  @objc public func pause()
  public func onCreate()
  public func onLoad()
  public func onReady()
  public func onError(error: EaseLiveSDK.EaseLiveError?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BridgeEvents : ObjectiveC.NSObject {
  public static func createJSONMessage(eventName: Swift.String, metadata: Swift.String?) throws -> Swift.String?
  public static func createJSONMessage(eventName: Swift.String, metadata: [Swift.String : Any]?) throws -> Swift.String?
  public static func createLanguageChangedJSONMessage(language: Swift.String) throws -> Swift.String?
  public static func createStateUpdatedJSONMessage(state: Swift.String = "") throws -> Swift.String?
  public static func createSpeedChangedJSONMessage(speed: Swift.Float) throws -> Swift.String?
  public static func createVolumeChangedJSONMessage(volume: Swift.Int) throws -> Swift.String?
  public static func createMuteChangedJSONMessage(mute: Swift.Bool) throws -> Swift.String?
  @objc public static func createTimecodeUpdatedJSONMessage(timecode: Swift.Int64 = 0, initialTimecode: Swift.Int64 = -1, maxTimecode: Swift.Int64 = -1) -> Swift.String
  public static func createMetadataUpdatedJSONMessage(metadata: Swift.String) throws -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PlayerPluginInterface : EaseLiveSDK.ComponentInterface {
  @objc func setUrl(videoUrl: Swift.String)
}
@available(*, unavailable, message: "migrate to PlayerPluginInterface")
public typealias PlayerPluginProtocol = EaseLiveSDK.PlayerPluginInterface
@objc @_inheritsConvenienceInitializers @objcMembers public class Config : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc(PlayerConfig) @objcMembers public class PlayerConfig : ObjectiveC.NSObject {
    @objc public func createUrl() -> Swift.String?
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(ViewConfig) @objcMembers public class ViewConfig : ObjectiveC.NSObject {
    @objc public func createUrl() -> Swift.String?
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public var player: EaseLiveSDK.Config.PlayerConfig {
    get
  }
  @objc public var view: EaseLiveSDK.Config.ViewConfig {
    get
  }
  @objc public static func fromJson(jsonObject: [Swift.String : Any]) -> EaseLiveSDK.Config
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class EaseLiveAvPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var player: AVFoundation.AVPlayer? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var playerLayer: AVFoundation.AVPlayerLayer {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setVideoScale(scaleX: Swift.Float, scaleY: Swift.Float, pivotX: Swift.Float, pivotY: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "renamed EaseLiveAvPlayerPlugin")
@objcMembers open class AvPlayerPlugin : EaseLiveSDK.EaseLiveAvPlayerPlugin {
  @objc override public init(parentView: UIKit.UIView, url: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers open class EaseLiveAvPlayerPlugin : EaseLiveSDK.PlayerPluginBase {
  @objc public var parentView: UIKit.UIView?
  @objc public var player: EaseLiveSDK.EaseLiveAvPlayer?
  @objc public var playerView: EaseLiveSDK.EaseLiveAvPlayerView?
  @objc public var loop: Swift.Bool
  @objc public init(parentView: UIKit.UIView, url: Swift.String)
  @objc override dynamic public init()
  @objc override open func createPlayer()
  @objc override open func setVideoScale(scaleX: Swift.Float, scaleY: Swift.Float, pivotX: Swift.Float, pivotY: Swift.Float, duration: Swift.Int)
  @objc override open func playVideoUrl(url: Swift.String)
  @objc override open func destroyPlayer()
  @objc override open func pause()
  @objc open func layer() -> QuartzCore.CALayer?
  @objc override open func setTime(time: Swift.Int64)
  @objc override open func setSpeed(speed: Swift.Float)
  @objc override open func setVolume(volume: Swift.Int)
  @objc override open func setMute(mute: Swift.Bool)
  @objc override open func setState(state: EaseLiveSDK.PlayerState)
  #if compiler(>=5.3) && $AsyncAwait
  @objc @available(iOS 16, tvOS 16, *)
  open func onTimedMetadataAsync(item: AVFoundation.AVMetadataItem, seekablePosition: Swift.Int64, seekableDuration: Swift.Int64) async -> Swift.Bool
  #endif
  @objc open func onTimedMetadata(item: AVFoundation.AVMetadataItem, seekablePosition: Swift.Int64, seekableDuration: Swift.Int64) -> Swift.Bool
  @objc open func onTimedMetadata(item: AVFoundation.AVMetadataItem, seekablePosition: Swift.Int64, seekableDuration: Swift.Int64, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc open func parseJson(value: Swift.String, position: Swift.Int64, duration: Swift.Int64) -> Swift.Bool
  @objc open func onProgress(currentTimecode: Swift.Int64, initialTimecode: Swift.Int64, maxTimecode: Swift.Int64)
  @objc open func onTracksChanged(videoTracks: [AVFoundation.AVMediaSelectionOption]?, audioTracks: [AVFoundation.AVMediaSelectionOption]?, textTracks: [AVFoundation.AVMediaSelectionOption]?, selectedVideo: AVFoundation.AVMediaSelectionOption?, selectedAudio: AVFoundation.AVMediaSelectionOption?, selectedText: AVFoundation.AVMediaSelectionOption?)
  @objc override open func setSelectedTracks(tracks: EaseLiveSDK.PlayerTracks)
  @objc deinit
}
public class PlayerSync {
  public var TAG: Swift.String
  public var syncId: Swift.String?
  public init(accountId: Swift.String)
  public func start(_ completion: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  public func stop()
  public enum CreateSecondScreenAppLinkError : Swift.Error {
    case noSyncId
    case couldNotLoadProgram
    case couldNotLoadProject
    case notConfiguredInProject
    public static func == (a: EaseLiveSDK.PlayerSync.CreateSecondScreenAppLinkError, b: EaseLiveSDK.PlayerSync.CreateSecondScreenAppLinkError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func createSecondScreenAppLink(projectId: Swift.String?, programId: Swift.String, env: Swift.String?, completion: @escaping (Swift.Result<Swift.String, EaseLiveSDK.PlayerSync.CreateSecondScreenAppLinkError>) -> Swift.Void)
  public func setTime(_ time: Swift.Int64)
  public func setState(_ state: EaseLiveSDK.PlayerState)
  public func setSpeed(_ speed: Swift.Float)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DeviceInfoUtils : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
  @objc public func sendDeviceInfo()
}
extension EaseLiveSDK.PlayerState : Swift.Equatable {}
extension EaseLiveSDK.PlayerState : Swift.Hashable {}
extension EaseLiveSDK.PlayerState : Swift.RawRepresentable {}
extension EaseLiveSDK.EaseLiveError.Level : Swift.Equatable {}
extension EaseLiveSDK.EaseLiveError.Level : Swift.Hashable {}
extension EaseLiveSDK.EaseLiveError.Level : Swift.RawRepresentable {}
extension EaseLiveSDK.EaseLiveError.Component : Swift.Equatable {}
extension EaseLiveSDK.EaseLiveError.Component : Swift.Hashable {}
extension EaseLiveSDK.EaseLiveError.Component : Swift.RawRepresentable {}
extension EaseLiveSDK.PlayerSync.CreateSecondScreenAppLinkError : Swift.Equatable {}
extension EaseLiveSDK.PlayerSync.CreateSecondScreenAppLinkError : Swift.Hashable {}
